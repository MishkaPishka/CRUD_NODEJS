#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('stocks:server');
var http = require('http');
var server;
var port;
class www {

  listenOnPort(inputPort) {
    /**
     * Get port from environment and store in Express.
     */
    port  = this.normalizePort(process.env.PORT || inputPort);

    app.set('port', port);

    /**
     * Create HTTP server.
     */

    server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', this.onError);
    server.on('listening', this.onListening);
  };

  /**
   * Normalize a port into a number, string, or false.
   */

  normalizePort(val) {
    var port_ = parseInt(val, 10);

    if (isNaN(port_)) {
      // named pipe
      return val;
    }

    if (port_ >= 0) {
      // port number
      return port_;
    }

    return false;
  };

  /**
   * Event listener for HTTP server "error.ejs" event.
   */

  onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  };

  /**
   * Event listener for HTTP server "listening" event.
   */

  onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  };
}
module.exports = new www()